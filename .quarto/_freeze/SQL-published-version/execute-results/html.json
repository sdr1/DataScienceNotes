{
  "hash": "fea9a557a46b3567c4bdbd84ad06f8db",
  "result": {
    "markdown": "---\ntitle: \"SQL\"\nauthor: \"Steven Rashin\"\ndate: \"2024-04-22\"\nexecute: \n  cache: true\nformat:\n  html:\n    page-layout: full\n    toc: true\n    grid:\n      sidebar-width: 350px\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n    include-in-header: \n      text: |\n        \\usepackage{makeidx}\n        \\makeindex\n    include-after-body: \n      text: |\n        \\printindex\n        website:\n---\n\n\n## Preliminaries\n\nFirst we're going to create a few datasets that we'll use to show what SQL can do\n\n\n::: {.cell hash='SQL-published-version_cache/html/intro_b196e91c1b4106cd839dbfa6a7a235c3'}\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/stevenrashin/Documents/GitHub/DataScienceNotes\n```\n:::\n:::\n\n::: {.cell hash='SQL-published-version_cache/html/create data_dc4d613d15b546223b029be1fb56fb10'}\n\n```{.r .cell-code}\nsample_data <- tibble(\n  id = 1:1000,\n  x1 = rnorm(1000, 0, 1),\n  x2 = rnorm(1000, 10, 15),\n  y = 3 * x1 + 4 * x2 + rnorm(1000, 0, 10),\n  g = rbinom(1000, size = 1, prob = 0.3)\n)\nsample_data2 <- tibble(\n  id = 1:1000,\n  x3 = rnorm(1000, 15, 30),\n  x4 = rnorm(1000, 20, 5),\n  y2 = 10 * x3 + 40 * x4 + rnorm(1000, 0, 40),\n  g2 = rbinom(1000, size = 1, prob = 0.3)\n)\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbWriteTable(conn = mydb, name = \"sample\", value = sample_data, overwrite = T)\ndbWriteTable(conn = mydb, name = \"other_sample\", value = sample_data2, overwrite = T)\n\n#### Try to load in postgresql - doesn't currently work\n\n# https://caltechlibrary.github.io/data-carpentry-R-ecology-lesson/05-r-and-databases.html\n# https://jtr13.github.io/cc21fall2/how-to-integrate-r-with-postgresql.html\n# https://solutions.posit.co/connections/db/databases/postgresql/\n#https://medium.com/geekculture/a-simple-guide-on-connecting-rstudio-to-a-postgresql-database-9e35ccdc08be\n```\n:::\n\n::: {.cell hash='SQL-published-version_cache/html/connect to sql_972de54dc15ef6279156791444965c1d'}\n\n```{.r .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbListTables(mydb) # returns a list of tables in your database\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\n## Basic Syntax\n\nThe basic syntax is you `SELECT` variables `FROM` a database.\n\n$$\\underbrace{\\text{SELECT }}_{\\text{Select vars}} \\underbrace{\\text{*}}_{\\text{* is all variables}}$$\n\n$$\\underbrace{\\text{FROM }}_{\\text{from where}} \\underbrace{\\text{db\\_name}}_{\\text{name}}$$\n\nSee e.g.,\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-1_96e3d68c819bd44feb61be4424d64ae5'}\n\n```{.sql .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\nSELECT *\nFROM sample\n```\n:::\n\n\nYou can run these commands in r using the following syntax. Since you can't run the sql commands in quarto without compiling, I've used this method to check that my sql commands actually work.\n\n\n::: {.cell hash='SQL-published-version_cache/html/r-to-sql_d63770b88792aa3af8b0d53505abb85b'}\n\n```{.r .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbGetQuery(mydb,'\n  select *\n  from \"sample\"\n  limit 10\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id           x1         x2           y g\n1   1 -0.292322973  17.622036   79.569812 0\n2   2  1.103428094  -3.226083  -12.985231 0\n3   3  0.178622761  63.534728  245.547251 0\n4   4 -0.837106572  17.725579   50.542776 1\n5   5  1.219368664 -25.444891 -102.049791 0\n6   6  0.330327419   9.982296   44.160825 0\n7   7 -0.006858368  13.432985   44.459063 0\n8   8 -0.006800915  -5.060463    5.424679 1\n9   9 -0.142207830  23.659236   97.476765 0\n10 10  0.129038201   6.329206   25.812063 0\n```\n:::\n:::\n\n\nThis can be modified (obviously!). Suppose you need two variables, `x1` and `x2`.\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-2_7f258cc8dfc7d77d47f1986e3996f78f'}\n\n```{.sql .cell-code}\nSELECT x1, x2\nFROM sample\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|         x1|         x2|\n|----------:|----------:|\n| -0.2923230|  17.622036|\n|  1.1034281|  -3.226083|\n|  0.1786228|  63.534728|\n| -0.8371066|  17.725579|\n|  1.2193687| -25.444891|\n|  0.3303274|   9.982296|\n| -0.0068584|  13.432985|\n| -0.0068009|  -5.060463|\n| -0.1422078|  23.659236|\n|  0.1290382|   6.329206|\n\n</div>\n:::\n\n\nHere's a more advanced query where we select rows where `var_1` $> 10$\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-3_23bd788f1e9cc2463f79fb10d66a05f6'}\n\n```{.sql .cell-code}\nSELECT x1, x2\nFROM sample\nWHERE x2 >= 10\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|         x1|       x2|\n|----------:|--------:|\n| -0.2923230| 17.62204|\n|  0.1786228| 63.53473|\n| -0.8371066| 17.72558|\n| -0.0068584| 13.43298|\n| -0.1422078| 23.65924|\n| -1.4434837| 29.94631|\n| -0.7600478| 34.21095|\n| -1.6875069| 18.19395|\n| -1.2902722| 25.84801|\n| -0.3086429| 19.90835|\n\n</div>\n:::\n\n\nOften you need summaries or operations by group `var_1` $> 10$:\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-4_f2aa257814243ebe8508492326319e50'}\n\n```{.sql .cell-code}\nSELECT avg(var1)\nFROM db_name\nGROUP BY group_var\nHAVING var2 > 0\n```\n:::\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-5_350f2a6c6ab7ad2a0e38e7197bf25d97'}\n\n```{.r .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbGetQuery(mydb,'\n  select avg(\"x1\")\n  from \"sample\"\n  group by \"g\"\n  having x2 >= 0\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    avg(\"x1\")\n1 0.001398952\n2 0.008783227\n```\n:::\n:::\n\n\nWhat is the difference? `HAVING` applies to groups as a whole whereas `WHERE` applies to individual rows. If you have both, the `WHERE` clause is applied first, the `GROUP BY` clause is second - so only the individual rows that meet the `WHERE` clause are grouped. The `HAVING` clause is then applied to the output. Then only the groups that meet the `HAVING` condition will appear.\n\nSuppose you need both:\n\n\n::: {.cell hash='SQL-published-version_cache/html/having-eg_a7503cbb46958c9f7afadd510f518187'}\n\n```{.sql .cell-code}\nSELECT AVG(var_3)\nFROM db_name\nWHERE var1 >= 10\nGROUP BY group_var\nHAVING var_2 > 5\n```\n:::\n\n\n\nAbove you'll get the average of variable 3 from $db\\_name$ only for the individual rows where $var\\_1$ is greater than 10 grouped by group_var where, within the groups their associated $var\\_2$ value is greater than 5.\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-6_90539d3daf2175d8de84c547e9f2c837'}\n\n```{.r .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbGetQuery(mydb,'\n  select avg(\"y\")\n  from \"sample\"\n  where \"x1\" >= 3 \n  group by \"g\"\n  having x2 >= 0\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   avg(\"y\")\n1  43.20164\n2 158.00006\n```\n:::\n:::\n\n\n## Data types\n\nHere are a few common data types. For a full list go to <https://www.postgresql.org/docs/current/datatype.html>.\n\n| Data Type | What does it do?                          |\n|-----------|-------------------------------------------|\n| int       | signed four-byte integer                  |\n| numeric   | exact number. use when dealing with money |\n| varchar   | variable-length character string          |\n| time      | time of day (no time zone)                |\n| timestamp | date and time (no time zone)              |\n| date      | calendar date (year, month, day)          |\n\n: Data Types {.striped .hover }\n\nFor a technical discussion of the difference between float4 and float8 see this post: <https://stackoverflow.com/questions/16889042/postgresql-what-is-the-difference-between-float1-and-float24>.\n\n## NULLS\n\nUse `IS NOT NULL` to get rid of nulls.  Usually used after the `WHERE` clause.\n\n## Aliasing\n\nSometimes you need to alias variables. This is especially necessary when merging as you can overwrite columns that have the same name that aren't explicitly part of the merge.\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-7_13bb32c4db6bdef8c1eca01e47776963'}\n\n```{.sql .cell-code}\nSELECT var AS new_var_name\nFROM ...\n```\n:::\n\n\nYou can also alias data frames - this is useful when you have multiple data frames.  \n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-8_3d7b1403aa3cc323c7eab2701055ba71'}\n\n```{.sql .cell-code}\nSELECT var AS new_var_name\nFROM df1 a \n```\n:::\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-9_5c8bd7ad9fb4144f1dfa3025f704d6e0'}\n\n```{.r .cell-code}\nmydb <- dbConnect(RSQLite::SQLite(), \"sample.sqlite\")\n\ndbGetQuery(mydb,'\n  select \"g\" as \"group\", ROUND(avg(\"y\"),2) as \"new_average\"\n  from \"sample\" \"b\"\n  group by \"g\"\n  having \"x2\" >= 0\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  group new_average\n1     0       39.29\n2     1       46.45\n```\n:::\n:::\n\n\n\n## Converting Data Types\n\nSometimes the data is in one format and you need it in another. You can use `CAST` to do this\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-10_356e4b51f4ef2bf386e925610bfc6939'}\n\n```{.sql .cell-code}\nCAST(variable AS int/numeric/varcar/time)\n```\n:::\n\n\nSometimes you need to get rid of nulls, to do that use `COALESCE`\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-11_244a8b7e5a500581faaeab5281c289bb'}\n\n```{.sql .cell-code}\nCOALESCE(variable, 0)\n```\n:::\n\n\n## Extracting\n\nA lot of times when dealing with dates you'll need a range or only part of the information given. To extract this data, you need the command `extract`.\n\nThis extracts a year from a date:\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-12_d7bd1fae89faf7291eca83be45b4ff02'}\n\n```{.sql .cell-code}\nEXTRACT(Year from date_var)\n```\n:::\n\n\nThis extracts an epoch (i.e. the time difference) between the end date and the start date:\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-13_06921690e4d5775e272f50268c00bdcb'}\n\n```{.sql .cell-code}\nEXTRACT(EPOCH from endvar-startvar)\n```\n:::\n\n\nSuppose, however, that you only want the days in the epoch. That's surprisingly easy with the following code:\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-14_ca218e52aed9e912cc1004734b6052d9'}\n\n```{.sql .cell-code}\nEXTRACT(Day from endvar-startvar)\n```\n:::\n\n\n## Aggregate Functions {#sec-aggregate}\n\nNote that in the table below all of the functions EXCEPT count ignore null values.\n\n| Aggregate Fcn          | What does it do?                                                                                                                                         |\n|:-------------------------|:---------------------------------------------|\n| `MIN()`                | returns the smallest value within the selected column                                                                                                    |\n| `MAX()`                | returns the largest value within the selected column                                                                                                     |\n| `COUNT()`              | returns the number of rows in a set                                                                                                                      |\n| `SUM()`                | returns the total sum of a numerical column                                                                                                              |\n| `AVG()`                | returns the *mean* value of a numerical column. Getting the median requires `PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY var1)`. See below for more info |\n| `GREATEST(var1, var2)` | Greatest rowwise among var1 and var2                                                                                                                     |\n| `LEAST(var1, var2)`    | Least rowwise among var1 and var2                                                                                                                        |\n\n: Aggregate Types {.striped .hover tbl-colwidths=\"\\[15,85\\]\"}\n\nBefore we go on, a brief digression on getting the median. For reasons known only to the creators of SQL, getting the median is fantastically difficult. Suppose you want the median as a decimal rounded to the second significant digit. You'd need to write `ROUND(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY var1)::DECIMAL, 2)`.[^1]\n\n[^1]: If you ask why, I'll give you my favorite coding answer.\n\nThe functions `MIN()` to `AVG()` operate globally but sometimes you need the biggest/smallest out of a single record (i.e. locally/within a row). You can do that with `GREATEST()` and `LEAST()`. Note that these also work on characters. An example will help clarify.\n\nSuppose you want to see the number of flights between a pair of cities (e.g. Austin and Dallas) but you don't care about where the plane begins. In this case the command `CONCAT(departure_city, '-' arrival_city)`[^2] will create **2** separate entries for Austin-Dallas and Dallas-Austin which is not what the question asked for. So you have to use `GREATEST` and `LEAST`.\n\n[^2]: See @sec-text for more details\n\nGreatest gets the highest alphabetically/greatest date/number out of a variable PER RECORD (i.e per row). Max gets the most **OVER ALL RECORDS**. Why does this difference matter? Suppose Abilene and Amarillo are in the data. Then if you used `MAX()` every row would be in the Abilene and Amarillo group.\n\nGoing back to our Dallas/Austin example, `GREATEST(departure_city, arrival_city)` would give us `Austin` and `LEAST(departure_city, arrival_city)` gives us `Dallas` in a row with a flight from Austin to Dallas. In a row with a flight from Austin to London the command would give us `Austin` and `London`. So to combine these to create a unique ID, we could type `CONCAT(GREATEST(destination_location, source_location),'-',LEAST(destination_location, source_location))` and that would give us `Austin-Dallas` whenever the these two cities appeared in destination location and source location.\n\n### Percentiles\n\nAs you could see from above, extracting the median is difficult. If you want a bunch of percentiles, the problem is even worse.\n\n\n::: {.cell hash='SQL-published-version_cache/html/percentiles_e130a7ecb74dc4a3f47792cc9f990f44'}\n\n```{.sql .cell-code}\nSELECT \nUNNEST(array[0, 0.25, 0.5, 0.75, 1]) AS percentile, \nUNNEST(PERCENTILE_CONT(array[0, 0.25, 0.5, 0.75, 1]) within group (order by var1)) <---- Note that unnest wraps the whole thing!  \nFROM ...\n\n```\n:::\n\n\nYou have two options for calculating percentiles `PERCENTILE_CONT` and `PERCENTILE_DISC`. `PERCENTILE_CONT` will interpolate values while `PERCENTILE_DISC` will give you values only from your data. Suppose you have 2,3,4,5. PERCENTILE_CONT would give you 3.5, PERCENTILE_DISC gives you 3.\n\n## Merging\n\nThere are four types of joins:\n\n-   INNER JOIN/JOIN\n    -   Joins all common records between tables\n-   LEFT JOIN\n    -   Joins the matching records in the right frame (i.e. the one after the LEFT JOIN clause) with all the records in the left frame (i.e. the one after the FROM clause)\n-   RIGHT JOIN\n    -   Joins all of the records in the right frame (i.e. the one after the RIGHT JOIN clause) with all the matching records in the left frame (i.e. the one after the FROM clause)\n-   FULL JOIN\n    -   All the records in both frames\n\nThese joins are all on some variable.\n\n\n::: {.cell hash='SQL-published-version_cache/html/join_6b074fdbfcf01e50d2bbbd7e2fa26fdc'}\n\n```{.sql .cell-code}\nSELECT a.var1, a.var2, a.id, b.var3, b.var4, b.id1 <---- note the aliases up here.  This is good practice to show where you're getting each variable from\nFROM df1 a <---- alias dataframe 1 as a\nINNER JOIN df2 b <----- alias dataframe 2 as b\nON a.id = b.id\n```\n:::\n\n\nYou can use `OR` in the join to join on either value.  `AND` works too.\n\n\n::: {.cell hash='SQL-published-version_cache/html/join2_02d2db392265d3f7a7bedebd5f520df7'}\n\n```{.sql .cell-code}\nSELECT a.var1, a.var2, a.id, a.id2, b.var3, b.var4, b.id1, b.alt_id <---- note the aliases up here.  This is good practice to show where you're getting each variable from\nFROM df1 a <---- alias dataframe 1 as a\nINNER JOIN df2 b <----- alias dataframe 2 as b\nON a.id = b.id OR a.var1 = b.alt_id <---- this joins if EITHER is true\n```\n:::\n\n\n\n-   UNION\n    -   Concatenates queries. Does not allow duplicates\n    \n\n::: {.cell hash='SQL-published-version_cache/html/union-example_e2bcb77dc64e72ea3db677a28a1404b4'}\n\n```{.sql .cell-code}\nSELECT ...\nFROM ...\nUNION\nSELECT ...\nFROM ...\n```\n:::\n\n    \n-   UNION ALL\n    -   Concatenates queries. Allows duplicates\n\n\n\n## Window Functions\n\nSuppose you need to do something within a window like find all flights within 3 days. Here you need a window function. The basic syntax is as follows:\n\n$\\underbrace{\\dots}_{\\text{Some fcn}} \\text{OVER} ($\n\n$\\hspace{0.5cm}\\underbrace{\\text{PARTITION BY} {\\color{blue}{\\text{var1}}}}_{\\text{group by }{\\color{blue}{\\text{var1}}}}$\n\n$\\hspace{0.5cm}\\underbrace{\\text{ORDER BY} {\\color{green}{\\text{var2}}}}_{\\text{order by }{\\color{green}{\\text{var2}}}}$ $) \\text{ AS newvar}$\n\nIn addition to the functions in @sec-aggregate, here are a bunch of useful functions. For a more comprehensive list, go to <https://www.postgresql.org/docs/current/functions-window.html>\n\n| Window Function | What does it do?                                                                                                                             |\n|:-------------------------|:---------------------------------------------|\n| `lag()`         | lags the data 1, lag(2) would lag 2 rows                                                                                                     |\n| `lead()`        | opposite of lag()                                                                                                                            |\n| `rank()`        | ranks rows. Suppose you have two rows tied for first, the rankings would go 1,1,3                                                            |\n| `dense_rank()`  | ranks rows without skipping.Suppose you have two rows tied for first, the rankings would go 1,1,2                                            |\n| `ntile()`       | splits the data into n groups, indexed by an integer, as equally as possible. `ntile(4)` for example, gives us quartiles if ordered properly |\n| `cume_dist()`   | cumulative distribution                                                                                                                      |\n\n: Window Functions {.striped .hover tbl-colwidths=\"\\[15,85\\]\"}\n\n### Bounding window functions\n\nSometimes you need to search within a certain **window** in a group as opposed to within an entire group. Suppose we wanted a moving average within the last three years. We could do that by properly bounding our query. The bounds come after the `ORDER BY` clause.\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-15_ce3b93c39b5ca8d03a41ded486004466'}\n\n```{.sql .cell-code}\nSELECT AVG(var1) OVER  <---- give us the mean of variable 1\n (  \n PARTITION BY country <---- group by country\n ORDER BY year desc <---- order by year descending\n ROWS BETWEEN 2 PRECEDING AND CURRENT ROW <---- gives us the last 3 years.  includes the current row.\n)\nFROM df1\n```\n:::\n\n\nWe can be fairly creative with the bounds using the following building blocks:\n\n| Bounds                        | What does it do?                                                    |\n|:-------------------------|:---------------------------------------------|\n| `n PRECEDING`                 | 2 Preceding gives us the 2 prior rows not including the current row |\n| `UNBOUND PRECEDING`           | All rows up to but not including the current row                    |\n| `CURRENT ROW`                 | Just the current row                                                |\n| `n PRECEDING AND CURRENT ROW` | n preceding and the current row                                     |\n| `n FOLLOWING`                 | n following but not including the current row                       |\n| `UNBOUND FOLLOWING`           | n preceding and the current row                                     |\n\n## Conditionals\n\nSometimes you don't just need an average, you need a conditional average or sum. This can be done with the `FILTER` command\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-16_ea20bb0b5d213f61fe157954fb60cb47'}\n\n```{.sql .cell-code}\nsum(var) FILTER(WHERE ...) AS ...\n```\n:::\n\n\nSometimes you need to create a new variable based on the values of other variables. You do that with `CASE WHEN`\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-17_7ef02c9944916982fd149ea0eca92f31'}\n\n```{.sql .cell-code}\nCASE \n  WHEN [condition] THEN [result]\n  WHEN [condition2] THEN [result2]\n  ELSE [result3] END AS new_conditional_variable  \n```\n:::\n\n\nNote that the `CASE WHEN ...` can be used in the `GROUP BY` command to create groups.\n\n## Dates\n\nDates are difficult to deal with. You just have to memorize these commands.\n\n| Function                                               | What does it do?              |\n|:-------------------------|:---------------------------------------------|\n| `MAKE_DATE(year,month,day)`                            | makes dates                   |\n| `MAKE_TIMESTAMP(year,month,day, hour, minute, second)` | makes timestamps              |\n| `MAKE_INTERVAL(year,month,day, hour, minute, second)`  | makes intervals               |\n| `DATE(datetime_var)`                                   | extracts dates from datetimes |\n\n: Datetime Functions {.striped .hover tbl-colwidths=\"\\[55,45\\]\"}\n\nThere are variations. Suppose you wanted to find all processes that lasted less than 10 days. You could use the command `MAKE_INTERVAL(days <= 10)`\n\n## Common Table Expressions {#sec-cte}\n\nSometimes you need to create a separate table that you can then extract data from to avoid conflicts like using a window function in the `WHERE` clause. You do this with a common table expression (CTE).\n\nThe basic syntax is as follows:\n\n\n::: {.cell hash='SQL-published-version_cache/html/cte-plain_20d18442a326021fdfda73bd78a663e6'}\n\n```{.sql .cell-code}\nWITH cte1 AS (\nSELECT ...\nFROM db1\n)\n\nSELECT ...\nFROM ... (likely db1 or db2)\n```\n:::\n\n\nYou're not limited to one CTE, you can have multiple if you want:\n\n\n::: {.cell hash='SQL-published-version_cache/html/ctwx2_1430c35cee033f567ba5915591471806'}\n\n```{.sql .cell-code}\nWITH RECURSIVE cte1 AS (\nSELECT ...\nFROM db1\n), <---- need the parenthesis and comma here otherwise you get an error!\ncte2 AS (\nSELECT ...\nFROM db2\n)\n\nSELECT ...\nFROM ... (likely db1 or db2)\n```\n:::\n\n\nBelow is an an example of using CTEs to avoid a window function in the `WHERE` clause.[^3] The query is from a problem that asks you to find the second longest flight between two cities. This is a bit of a tricky problem because it requries a window function, concatentaion, ordering text strings, and a common table expression.\n\n[^3]: See <https://www.interviewquery.com/questions/second-longest-flight> for full problem details\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-18_22c8f2a3e51861b3aefbaa72ba69a620'}\n\n```{.sql .cell-code}\nWITH tmp AS (SELECT \nid, \ndestination_location,\nsource_location,\nflight_start,\nflight_end,\ndense_rank() OVER (\n    PARTITION BY CONCAT(GREATEST(destination_location, source_location),'.',LEAST(destination_location, source_location))\n    ORDER BY extract(epoch from flight_end - flight_start) desc\n) AS flight_duration\nFROM flights)\n\nSELECT id, destination_location, source_location, flight_start, flight_end\nFROM tmp\nwhere flight_duration = 2\norder by id\n```\n:::\n\n\nLet's go through this, starting with the structure. Here we're creating a common table expression called cte and then using it\n\n$\\text{WITH } {\\color{red}{\\text{tmp}}} \\text{ AS (} \\leftarrow \\text{Create CTE called } \\color{red}{\\text{tmp}}$\\\n$\\hspace{1cm}\\text{SELECT} \\dots \\leftarrow \\text{Standard SQL commands in here}$\\\n$\\hspace{1cm}\\text{FROM} \\dots$\\\n$) \\leftarrow \\text{Close out CTE}$\n\n$\\text{SELECT} \\dots$\\\n$\\text{FROM } {\\color{red}{\\text{tmp}}} \\leftarrow \\text{Use } {\\color{red}{\\text{tmp}}} \\text{ as a normal table}$\n\nThe other tricky bit is the window function. Here we're using a dense rank (i.e. ranking everything sequentially so if two are tied for first the ranks are 1,1,2) by city pair (that's the variable after partition by) ordering those groups by flight time descending.\n\n## Subqueries\n\nSuppose you need a one off query within a query. You can use a sub query! The basic syntax is below. You can put them anywhere. For example, here's one in the `FROM` clause. Note that you need to alias your subqueries or else they'll fail\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-19_0dcd9e5853782f91c305c1b9617f931a'}\n\n```{.sql .cell-code}\nSELECT ...\nFROM (\n  SELECT *\n  FROM db1\n) AS db2\n```\n:::\n\n\nYou could, however, do one in the `SELECT` clause if you wanted\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-20_39dcdd7983445931315fa838cad12f39'}\n\n```{.sql .cell-code}\nSELECT (\n  SELECT ...\n  FROM ...\n)\nFROM db1\n```\n:::\n\n\nSo when to use common table expressions versus subtables? Common table expressions are, generally, preferred because they're more readable and can be used multiple times. See, e.g., below, where we havethe same query as @sec-cte but with a subquery instead of a common table expression.\n\n\n::: {.cell hash='SQL-published-version_cache/html/unnamed-chunk-21_287bbd18eb8e55dcee56b10e23d60354'}\n\n```{.sql .cell-code}\n\nSELECT \nid, \ndestination_location,\nsource_location,\nflight_start,\nflight_end\nFROM (\n    SELECT \n    *,  \ndense_rank() OVER (\n    PARTITION BY CONCAT(GREATEST(destination_location, source_location),'.',LEAST(destination_location, source_location))\n    ORDER BY extract(epoch from flight_end - flight_start) desc) AS duration_rank\n    FROM flights\n    ) AS subquery\n\nWHERE duration_rank = 2\norder by id\n```\n:::\n\n\n### Subquery Joins\n\nSometimes you need to do something to a database before joining it. Here a subquery join is helpful\n\n\n::: {.cell hash='SQL-published-version_cache/html/sub-q-join_58e5e3c9c5bce416441c877187346998'}\n\n```{.sql .cell-code}\nSELECT user_id, var1, var2 \nFROM  db1\nLEFT JOIN \n    ( <---- begin subquery \n        SELECT id, var3, var4\n        FROM db2\n        WHERE ... <-----  you're using a subquery because you need to do something so I've included the where in here \n    ) AS a <--- end and alias subquery \nON db1.user_id = a.id <---- join on subquery name!\n```\n:::\n\n\n## Text {#sec-text}\n\nSometimes you're faced with a task where you have to concatenate (i.e. join) or split variables. I've seen this problem when trying to match pairs of cities for flights when the question only cares about the pair and not the ordering.\n\n$\\text{CONCAT(var1, var2)}$\n\n$\\underbrace{\\text{SPLIT\\_PART}}_{\\text{split apart}}(\\underbrace{{\\color{red}{\\text{var}}, {\\color{blue}{\\text{'.'}}}, {\\color{green}{\\text{1}}}}}_{\\text{split apart}{\\color{red}{\\text{ var}}} \\text{ on}{\\color{blue}{\\text{ a period}}} \\text{ taking }{\\color{green}{\\text{the first instance}}} })$\n\n## Random Sample\n\nThe method below selects 10% of the data.\n\n\n::: {.cell hash='SQL-published-version_cache/html/random-sample_7492a0b6e1e2b14975d46733c4e138d2'}\n\n```{.sql .cell-code}\nSELECT ...\nFROM ...\nTABLESAMPLE BERNOULLI(10)\n```\n:::\n\n\n## Summary Statistics\n\nGetting summary statistics is a pain the ass. So here is some code that will do it for a variable called $a$ in database $t1$. The difficulty of the code is that it requires two separate common table expressions. Here's a sketch of what that looks like. Note that adding RECURSIVE to the with query allows you to select from db1 in the db2 query.\n\n\n::: {.cell hash='SQL-published-version_cache/html/show-cte-x2-again_37b634aff2d9c09bf82bd0f1450f6efc'}\n\n```{.sql .cell-code}\nWITH RECURSIVE cte1 AS (\nSELECT ...\nFROM db1\n),\ncte2 AS (\nSELECT ...\nFROM db2\n)\n\nSELECT ...\nFROM ... (likely db1 or db2)\n```\n:::\n\n::: {.cell hash='SQL-published-version_cache/html/summary-stats_836d1c7d1c3aef101e42dda720c9f7e2'}\n\n```{.sql .cell-code}\nWITH RECURSIVE\nsummary_stats AS\n(\n SELECT \n  ROUND(AVG(a), 2) AS mean,\n  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY a) AS median,\n  MIN(a) AS min,\n  MAX(a) AS max,\n  MAX(a) - MIN(a) AS range,\n  ROUND(STDDEV(a), 2) AS standard_deviation,\n  ROUND(VARIANCE(a), 2) AS variance,\n  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY a) AS q1,\n  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY a) AS q3\n   FROM t1\n),\nrow_summary_stats AS\n(\nSELECT \n 1 AS id, \n 'mean' AS statistic, \n mean AS value \n  FROM summary_stats\nunion all\nSELECT \n 2, \n 'median', \n median \n  FROM summary_stats\nUNION\nSELECT \n 3, \n 'minimum', \n min \n  FROM summary_stats\nUNION\nSELECT \n 4, \n 'maximum', \n max \n  FROM summary_stats\nUNION\nSELECT \n 5, \n 'range', \n range \n  FROM summary_stats\nUNION\nSELECT \n 6, \n 'standard deviation', \n standard_deviation \n  FROM summary_stats\nUNION\nSELECT \n 7, \n 'variance', \n variance \n  FROM summary_stats\nUNION\nSELECT \n 9, \n 'Q1', \n q1 \n  FROM summary_stats\nUNION\nSELECT \n 10, \n 'Q3', \n q3 \n  FROM summary_stats\nUNION\nSELECT \n 11, \n 'IQR', \n (q3 - q1) \n  FROM summary_stats\nUNION\nSELECT \n 12, \n 'skewness', \n ROUND(3 * (mean - median)::NUMERIC / standard_deviation, 2) AS skewness \n  FROM summary_stats\n)\nSELECT * \n FROM row_summary_stats\n  ORDER BY id;\n```\n:::\n\n\n## Execution Order\n\n1.  JOIN\n    -   If no JOIN, then we start at FROM\n2.  FROM\n3.  WHERE\n4.  GROUP BY\n5.  HAVING\n6.  SELECT\n7.  DISTINCT\n8.  ORDER BY\n9.  LIMIT/OFFSET\n\n### More Efficient Code\n\n-   <https://nodeteam.medium.com/how-to-optimize-postgresql-queries-226e6ff15f72>\n-   Properly index\\* columns used in WHERE and JOIN conditions.\n    -   Index will create a pointer to the actual rows in the specified table.\n    -   <https://www.postgresql.org/docs/current/sql-createindex.html>\n-   Use appropriate data types and avoid unnecessary data type conversions.\n-   Limit the use of SELECT \\* and only retrieve the columns you need.\n-   Minimize the use of subqueries and consider JOIN alternatives.\n-   Monitor and analyze query performance using database-specific tools and profiling.\"\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}